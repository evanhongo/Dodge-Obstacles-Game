{"version":3,"sources":["useWatch.js","App.jsx","useInterval.js","serviceWorker.js","index.js"],"names":["useWatch","dep","callback","prev","useRef","prevArray","isInit","isArray","Array","useEffect","current","forEach","e","index","App","canvasRef","useState","width","height","x","y","piece","setPiece","obstacles","setObstacles","frameNo","setFrameNo","isCrashed","setIsCrashed","handleKeyDown","useCallback","key","p","window","addEventListener","removeEventListener","interval","timer","setInterval","clearInterval","useInterval","n","start","stop","console","log","nv","canvas","Math","floor","random","gap","tmp","slice","map","o","np","no","myleft","myright","mytop","mybottom","i","length","otherleft","otherright","othertop","otherbottom","ctx","getContext","clearRect","fillStyle","fillRect","font","fillText","ref","style","border","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f7b631b.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nexport default function useWatch(dep, callback) {\r\n  const prev = useRef();\r\n  const prevArray = useRef([]);\r\n  const isInit = useRef(false);\r\n  const isArray = Array.isArray(dep);\r\n  \r\n  useEffect(() => {\r\n    if(!isInit.current) isInit.current = true;\r\n    if(isArray) {\r\n      callback(dep, prevArray.current);\r\n      dep.forEach((e, index) => {\r\n        prevArray.current[index] = e;\r\n      });\r\n    }\r\n    else { \r\n      callback(dep, prev.current);\r\n      prev.current = dep;\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, isArray ? dep : [dep]);\r\n}","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport useWatch from './useWatch'; \nimport useInterval from './useInterval';\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [piece, setPiece] =  useState({width: 30, height: 30, x: 10, y:120});\n  const [obstacles, setObstacles] = useState([\n          {width: 15, height: 50, x: 100, y:0}, \n          {width: 15, height: 50, x: 100, y:220}]);\n  const [frameNo, setFrameNo] = useState(0);\n  const [isCrashed, setIsCrashed] = useState(false);\n  \n  const handleKeyDown = useCallback((e) => {\n    switch(e.key) {\n      case \"ArrowLeft\": \n        setPiece((p)=>{ return {width: p.width, height: p.height, x: p.x-2, y:p.y} });\n        break;\n      case \"ArrowRight\": \n        setPiece((p)=>{ return {width: p.width, height: p.height, x: p.x+2, y:p.y} });\n        break;\n      case \"ArrowUp\": \n        setPiece((p)=>{ return {width: p.width, height: p.height, x: p.x, y:p.y-2} });\n        break;\n      case \"ArrowDown\": \n        setPiece((p)=>{ return {width: p.width, height: p.height, x: p.x, y:p.y+2} });\n        break;\n      default: ;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  const [start, stop] = useInterval(() => { setFrameNo((n) => n+1); }, 20);\n  useEffect(() => {\n    console.log(\"!!\")\n    start();\n  }, [])\n\n  useWatch(frameNo, (nv) => {\n    if(nv === 0 || (nv / 150) % 1 === 0){\n      const canvas = canvasRef.current;\n      const x = canvas.width;\n      const y = canvas.height;\n      const minHeight = 20;\n      const maxHeight = 200;\n      const height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\n      const minGap = 50;\n      const maxGap = 200;\n      const gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\n      setObstacles((obstacles) => {\n        const tmp = obstacles[0].x + obstacles[0].width < 0 ? obstacles.slice(2) : obstacles;\n        return [...tmp.map((o) => { o.x += -1; return o;}), \n          {width: 15, height, x, y: 0}, \n          {width: 15, height: y - height - gap, x, y: height + gap}\n        ];\n      });\n    }\n    else \n      setObstacles((obstacles) => {\n        const tmp = obstacles[0].x + obstacles[0].width < 0 ? obstacles.slice(2) : obstacles;\n        return tmp.map((o) => { o.x += -1; return o;});\n      });\n  });\n\n  useWatch([piece, obstacles], ([np, no]) => { //判斷是否撞到障礙物\n    const myleft = np.x;\n    const myright = np.x + (np.width);\n    const mytop = np.y;\n    const mybottom = np.y + (np.height);\n    for(let i = 0; i < no.length; i++) {\n      const otherleft = no[i].x;\n      const otherright = no[i].x + (no[i].width);\n      const othertop = no[i].y;\n      const otherbottom = no[i].y + (no[i].height);\n      if (!((mybottom < othertop) || (mytop > otherbottom) ||\n        (myright < otherleft) ||\n        (myleft > otherright))) {\n          setIsCrashed(true);\n      }\n    }\n  });\n\n  useWatch(isCrashed, (nv) => {\n    if(nv) {\n      window.removeEventListener('keydown', handleKeyDown);\n      stop();\n    }\n  });\n\n  useEffect(()=> {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    //draw piece\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(piece.x, piece.y, piece.width, piece.height);\n\n    //draw obstacles\n    for(let i = 0; i < obstacles.length; i++){\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(obstacles[i].x, obstacles[i].y, obstacles[i].width, obstacles[i].height);\n    }\n\n    //draw score\n    ctx.fillStyle = \"black\";\n    ctx.font = \"30px Consolas\";\n    ctx.fillText(\"SCORE: \" + frameNo, 20, 40);\n\n  });\n  \n  return (\n    <canvas\n      ref={canvasRef}\n      width={480}\n      height={270}\n      style={{border:\"3px solid gray\"}}\n    />\n  );\n}\n\nexport default App;\n","import { useRef } from 'react';\r\n\r\nexport default function useInterval(callback, interval) {\r\n  const timer = useRef();\r\n\r\n  function start() {\r\n    if(!timer.current)\r\n      timer.current = setInterval(callback, interval);\r\n  }\r\n\r\n  function stop() {  \r\n    clearInterval(timer.current);\r\n    timer.current = null;\r\n  }\r\n\r\n  return [start, stop];\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}